<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.dao.JobTransferMapper">
  <resultMap id="BaseResultMap" type="com.neuedu.pojo.JobTransfer">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="emp_id" jdbcType="INTEGER" property="empId" />
    <result column="before_job" jdbcType="INTEGER" property="beforeJob" />
    <result column="after_job" jdbcType="INTEGER" property="afterJob" />
    <result column="tran_type" jdbcType="INTEGER" property="tranType" />
    <result column="tran_reason" jdbcType="VARCHAR" property="tranReason" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="tran_date" jdbcType="DATE" property="tranDate" />
  </resultMap>
  <resultMap id="WithEmpMap" type="com.neuedu.pojo.JobTransfer">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="emp_id" jdbcType="INTEGER" property="empId" />
    <result column="before_job" jdbcType="INTEGER" property="beforeJob" />
    <result column="after_job" jdbcType="INTEGER" property="afterJob" />
    <result column="tran_type" jdbcType="INTEGER" property="tranType" />
    <result column="tran_reason" jdbcType="VARCHAR" property="tranReason" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="tran_date" jdbcType="DATE" property="tranDate" />
    <association property="emp" javaType="com.neuedu.pojo.Emp">
      <id column="e_id" property="eId"/>
      <result column="name" property="name"/>
      <result column="sex" property="sex"/>
    </association>
    <association property="job" javaType="com.neuedu.pojo.Job">
      <id column="j_id" property="jId"/>
      <result column="job_name" property="jobName"/>
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, emp_id, before_job, after_job, tran_type, tran_reason, remarks, tran_date
  </sql>
  <sql id="WithEmp_Column_List">
    id, emp_id, before_job, after_job, tran_type, tran_reason, remarks, tran_date,
    emp.name, emp.sex, job.job_name
  </sql>
  <select id="selectByExample" parameterType="com.neuedu.pojo.JobTransferExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job_transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithEmp" resultMap="WithEmpMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithEmp_Column_List" />
    from job_transfer
    left join emp on job_transfer.emp_id=emp.e_id
    left join job on job_transfer.before_job=job.j_id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from job_transfer
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job_transfer
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.pojo.JobTransferExample">
    delete from job_transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.pojo.JobTransfer">
    insert into job_transfer (id, emp_id, before_job, 
      after_job, tran_type, tran_reason, 
      remarks, tran_date)
    values (#{id,jdbcType=INTEGER}, #{empId,jdbcType=INTEGER}, #{beforeJob,jdbcType=INTEGER}, 
      #{afterJob,jdbcType=INTEGER}, #{tranType,jdbcType=INTEGER}, #{tranReason,jdbcType=VARCHAR}, 
      #{remarks,jdbcType=VARCHAR}, #{tranDate,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.pojo.JobTransfer">
    insert into job_transfer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="empId != null">
        emp_id,
      </if>
      <if test="beforeJob != null">
        before_job,
      </if>
      <if test="afterJob != null">
        after_job,
      </if>
      <if test="tranType != null">
        tran_type,
      </if>
      <if test="tranReason != null">
        tran_reason,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="tranDate != null">
        tran_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="empId != null">
        #{empId,jdbcType=INTEGER},
      </if>
      <if test="beforeJob != null">
        #{beforeJob,jdbcType=INTEGER},
      </if>
      <if test="afterJob != null">
        #{afterJob,jdbcType=INTEGER},
      </if>
      <if test="tranType != null">
        #{tranType,jdbcType=INTEGER},
      </if>
      <if test="tranReason != null">
        #{tranReason,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="tranDate != null">
        #{tranDate,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.pojo.JobTransferExample" resultType="java.lang.Long">
    select count(*) from job_transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update job_transfer
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.empId != null">
        emp_id = #{record.empId,jdbcType=INTEGER},
      </if>
      <if test="record.beforeJob != null">
        before_job = #{record.beforeJob,jdbcType=INTEGER},
      </if>
      <if test="record.afterJob != null">
        after_job = #{record.afterJob,jdbcType=INTEGER},
      </if>
      <if test="record.tranType != null">
        tran_type = #{record.tranType,jdbcType=INTEGER},
      </if>
      <if test="record.tranReason != null">
        tran_reason = #{record.tranReason,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.tranDate != null">
        tran_date = #{record.tranDate,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update job_transfer
    set id = #{record.id,jdbcType=INTEGER},
      emp_id = #{record.empId,jdbcType=INTEGER},
      before_job = #{record.beforeJob,jdbcType=INTEGER},
      after_job = #{record.afterJob,jdbcType=INTEGER},
      tran_type = #{record.tranType,jdbcType=INTEGER},
      tran_reason = #{record.tranReason,jdbcType=VARCHAR},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      tran_date = #{record.tranDate,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.pojo.JobTransfer">
    update job_transfer
    <set>
      <if test="empId != null">
        emp_id = #{empId,jdbcType=INTEGER},
      </if>
      <if test="beforeJob != null">
        before_job = #{beforeJob,jdbcType=INTEGER},
      </if>
      <if test="afterJob != null">
        after_job = #{afterJob,jdbcType=INTEGER},
      </if>
      <if test="tranType != null">
        tran_type = #{tranType,jdbcType=INTEGER},
      </if>
      <if test="tranReason != null">
        tran_reason = #{tranReason,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="tranDate != null">
        tran_date = #{tranDate,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.pojo.JobTransfer">
    update job_transfer
    set emp_id = #{empId,jdbcType=INTEGER},
      before_job = #{beforeJob,jdbcType=INTEGER},
      after_job = #{afterJob,jdbcType=INTEGER},
      tran_type = #{tranType,jdbcType=INTEGER},
      tran_reason = #{tranReason,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      tran_date = #{tranDate,jdbcType=DATE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>